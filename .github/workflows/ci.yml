name: CI

on:
  push:
    branches: [ main ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    name: Test
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest]
        go-version: ['1.21', '1.22']
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: ${{ matrix.go-version }}

    - name: Cache Go modules
      uses: actions/cache@v4
      with:
        path: ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-

    - name: Get dependencies
      run: |
        go mod download
        go mod verify

    - name: Run tests
      run: |
        go test -v -race -coverprofile=coverage.out -covermode=atomic ./...
        go tool cover -func=coverage.out

    - name: Upload coverage to Codecov
      if: matrix.os == 'ubuntu-latest' && matrix.go-version == '1.21'
      uses: codecov/codecov-action@v4
      with:
        file: ./coverage.out
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false
        verbose: true
        # Token is optional for public repos, but recommended
        token: ${{ secrets.CODECOV_TOKEN }}

    - name: Upload coverage to Coveralls
      if: matrix.os == 'ubuntu-latest' && matrix.go-version == '1.21'
      uses: coverallsapp/github-action@v2
      continue-on-error: true
      with:
        file: ./coverage.out
        format: golang

    - name: Generate Coverage Summary
      if: matrix.os == 'ubuntu-latest' && matrix.go-version == '1.21'
      run: |
        echo "### Test Coverage Report :test_tube:" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "| Package | Coverage |" >> $GITHUB_STEP_SUMMARY
        echo "|---------|----------|" >> $GITHUB_STEP_SUMMARY
        go tool cover -func=coverage.out | grep -E '^github.com' | awk '{printf "| %s | %s |\n", $1, $3}' >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        TOTAL_COVERAGE=$(go tool cover -func=coverage.out | grep total | awk '{print $3}')
        echo "**Total Coverage: ${TOTAL_COVERAGE}**" >> $GITHUB_STEP_SUMMARY

  lint:
    name: Lint
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.21'

    - name: Run go vet
      run: go vet ./...

    - name: Run golangci-lint
      uses: golangci/golangci-lint-action@v6
      with:
        version: latest
        args: --timeout=5m --skip-dirs=vendor

  security:
    name: Security Scan
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Run Gosec Security Scanner
      uses: securego/gosec@master
      with:
        args: '-no-fail -fmt sarif -out results.sarif ./...'

    - name: Upload SARIF file
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: results.sarif

  build:
    name: Build Test
    runs-on: ubuntu-latest
    needs: [test, lint]
    strategy:
      matrix:
        include:
          - os: linux
            arch: amd64
          - os: linux
            arch: arm64
          - os: darwin
            arch: amd64
          - os: darwin
            arch: arm64
          - os: windows
            arch: amd64
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.21'

    - name: Build
      env:
        GOOS: ${{ matrix.os }}
        GOARCH: ${{ matrix.arch }}
        CGO_ENABLED: 0
      run: |
        output_name="gitlab-runner-tui-${{ matrix.os }}-${{ matrix.arch }}"
        if [ "${{ matrix.os }}" = "windows" ]; then
          output_name="${output_name}.exe"
        fi
        go build -v -ldflags="-s -w" -o "$output_name" ./cmd/gitlab-runner-tui
        ls -la gitlab-runner-tui-*